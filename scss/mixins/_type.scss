.ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin font-face(
  $font-family,
  $file-path,
  $file-formats: ttf woff2 woff,
  $asset-pipeline: false
) {
  @font-face {
    font-family: $font-family;
    src: _font-source-declaration(
                    $font-family,
                    $file-path,
                    $asset-pipeline,
                    $file-formats
    );
    @content;
  }
}

@function _font-source-declaration(
  $font-family,
  $file-path,
  $asset-pipeline,
  $file-formats
) {
  $src: ();

  $formats-map: (
          eot:   "#{$file-path}.eot?#iefix" format("embedded-opentype"),
          woff2: "#{$file-path}.woff2" format("woff2"),
          woff:  "#{$file-path}.woff" format("woff"),
          ttf:   "#{$file-path}.ttf" format("truetype"),
          svg:   "#{$file-path}.svg##{$font-family}" format("svg"),
  );

  @each $key, $values in $formats-map {
    @if _contains($file-formats, $key) {
      $file-path: nth($values, 1);
      $font-format: nth($values, 2);

      @if $asset-pipeline == true {
        $src: append($src, font-url($file-path) $font-format, comma);
      } @else {
        $src: append($src, url($file-path) $font-format, comma);
      }
    }
  }

  @return $src;
}

@function _contains(
  $list,
  $values...
) {
  @each $value in $values {
    @if type-of(index($list, $value)) != "number" {
      @return false;
    }
  }

  @return true;
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}